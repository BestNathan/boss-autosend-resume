/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.TechwolfAction', null, global);
goog.exportSymbol('proto.TechwolfArticle', null, global);
goog.exportSymbol('proto.TechwolfButton', null, global);
goog.exportSymbol('proto.TechwolfChatProtocol', null, global);
goog.exportSymbol('proto.TechwolfClientInfo', null, global);
goog.exportSymbol('proto.TechwolfClientTime', null, global);
goog.exportSymbol('proto.TechwolfDataSync', null, global);
goog.exportSymbol('proto.TechwolfDialog', null, global);
goog.exportSymbol('proto.TechwolfHyperLink', null, global);
goog.exportSymbol('proto.TechwolfImage', null, global);
goog.exportSymbol('proto.TechwolfImageInfo', null, global);
goog.exportSymbol('proto.TechwolfInterview', null, global);
goog.exportSymbol('proto.TechwolfIq', null, global);
goog.exportSymbol('proto.TechwolfIqResponse', null, global);
goog.exportSymbol('proto.TechwolfJobDesc', null, global);
goog.exportSymbol('proto.TechwolfKVEntry', null, global);
goog.exportSymbol('proto.TechwolfMessage', null, global);
goog.exportSymbol('proto.TechwolfMessageBody', null, global);
goog.exportSymbol('proto.TechwolfMessageRead', null, global);
goog.exportSymbol('proto.TechwolfMessageSync', null, global);
goog.exportSymbol('proto.TechwolfNotify', null, global);
goog.exportSymbol('proto.TechwolfOrderDetail', null, global);
goog.exportSymbol('proto.TechwolfOrderDetailEntry', null, global);
goog.exportSymbol('proto.TechwolfOrderDetailItem', null, global);
goog.exportSymbol('proto.TechwolfPresence', null, global);
goog.exportSymbol('proto.TechwolfRedEnvelope', null, global);
goog.exportSymbol('proto.TechwolfResume', null, global);
goog.exportSymbol('proto.TechwolfSound', null, global);
goog.exportSymbol('proto.TechwolfUser', null, global);
goog.exportSymbol('proto.TechwolfUserSync', null, global);
goog.exportSymbol('proto.TechwolfVideo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfUser.displayName = 'proto.TechwolfUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfUser.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    name: jspb.Message.getField(msg, 2),
    avatar: jspb.Message.getField(msg, 3),
    company: jspb.Message.getField(msg, 4),
    headimg: jspb.Message.getField(msg, 5),
    certification: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfUser}
 */
proto.TechwolfUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfUser;
  return proto.TechwolfUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfUser}
 */
proto.TechwolfUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatar(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeadimg(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCertification(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt32(
      6,
      f
    );
  }
};


/**
 * required int64 uid = 1;
 * @return {number}
 */
proto.TechwolfUser.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfUser.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfUser.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfUser.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.TechwolfUser.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfUser.prototype.setName = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfUser.prototype.clearName = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfUser.prototype.hasName = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string avatar = 3;
 * @return {string}
 */
proto.TechwolfUser.prototype.getAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TechwolfUser.prototype.setAvatar = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfUser.prototype.clearAvatar = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfUser.prototype.hasAvatar = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string company = 4;
 * @return {string}
 */
proto.TechwolfUser.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TechwolfUser.prototype.setCompany = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfUser.prototype.clearCompany = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfUser.prototype.hasCompany = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 headImg = 5;
 * @return {number}
 */
proto.TechwolfUser.prototype.getHeadimg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TechwolfUser.prototype.setHeadimg = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.TechwolfUser.prototype.clearHeadimg = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfUser.prototype.hasHeadimg = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int32 certification = 6;
 * @return {number}
 */
proto.TechwolfUser.prototype.getCertification = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.TechwolfUser.prototype.setCertification = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.TechwolfUser.prototype.clearCertification = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfUser.prototype.hasCertification = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfSound = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfSound, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfSound.displayName = 'proto.TechwolfSound';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfSound.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfSound.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfSound} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfSound.toObject = function(includeInstance, msg) {
  var f, obj = {
    sid: jspb.Message.getField(msg, 1),
    url: jspb.Message.getField(msg, 2),
    duration: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfSound}
 */
proto.TechwolfSound.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfSound;
  return proto.TechwolfSound.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfSound} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfSound}
 */
proto.TechwolfSound.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfSound.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfSound.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfSound} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfSound.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int64 sid = 1;
 * @return {number}
 */
proto.TechwolfSound.prototype.getSid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfSound.prototype.setSid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfSound.prototype.clearSid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfSound.prototype.hasSid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.TechwolfSound.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfSound.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfSound.prototype.clearUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfSound.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 duration = 3;
 * @return {number}
 */
proto.TechwolfSound.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TechwolfSound.prototype.setDuration = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfSound.prototype.clearDuration = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfSound.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfVideo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfVideo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfVideo.displayName = 'proto.TechwolfVideo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfVideo.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfVideo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfVideo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfVideo.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2),
    duration: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfVideo}
 */
proto.TechwolfVideo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfVideo;
  return proto.TechwolfVideo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfVideo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfVideo}
 */
proto.TechwolfVideo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfVideo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfVideo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfVideo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfVideo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.TechwolfVideo.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfVideo.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfVideo.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfVideo.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 status = 2;
 * @return {number}
 */
proto.TechwolfVideo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TechwolfVideo.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfVideo.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfVideo.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 duration = 3;
 * @return {number}
 */
proto.TechwolfVideo.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TechwolfVideo.prototype.setDuration = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfVideo.prototype.clearDuration = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfVideo.prototype.hasDuration = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfInterview = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfInterview, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfInterview.displayName = 'proto.TechwolfInterview';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfInterview.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfInterview.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfInterview} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfInterview.toObject = function(includeInstance, msg) {
  var f, obj = {
    condition: jspb.Message.getField(msg, 1),
    text: jspb.Message.getField(msg, 2),
    url: jspb.Message.getField(msg, 3),
    extend: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfInterview}
 */
proto.TechwolfInterview.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfInterview;
  return proto.TechwolfInterview.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfInterview} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfInterview}
 */
proto.TechwolfInterview.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCondition(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfInterview.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfInterview.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfInterview} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfInterview.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int32 condition = 1;
 * @return {number}
 */
proto.TechwolfInterview.prototype.getCondition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfInterview.prototype.setCondition = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfInterview.prototype.clearCondition = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfInterview.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string text = 2;
 * @return {string}
 */
proto.TechwolfInterview.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfInterview.prototype.setText = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfInterview.prototype.clearText = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfInterview.prototype.hasText = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.TechwolfInterview.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TechwolfInterview.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfInterview.prototype.clearUrl = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfInterview.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string extend = 4;
 * @return {string}
 */
proto.TechwolfInterview.prototype.getExtend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TechwolfInterview.prototype.setExtend = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfInterview.prototype.clearExtend = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfInterview.prototype.hasExtend = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfImageInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfImageInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfImageInfo.displayName = 'proto.TechwolfImageInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfImageInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfImageInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfImageInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfImageInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    url: jspb.Message.getField(msg, 1),
    width: jspb.Message.getField(msg, 2),
    height: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfImageInfo}
 */
proto.TechwolfImageInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfImageInfo;
  return proto.TechwolfImageInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfImageInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfImageInfo}
 */
proto.TechwolfImageInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfImageInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfImageInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfImageInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfImageInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required string url = 1;
 * @return {string}
 */
proto.TechwolfImageInfo.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfImageInfo.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfImageInfo.prototype.clearUrl = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfImageInfo.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 width = 2;
 * @return {number}
 */
proto.TechwolfImageInfo.prototype.getWidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TechwolfImageInfo.prototype.setWidth = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfImageInfo.prototype.clearWidth = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfImageInfo.prototype.hasWidth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 height = 3;
 * @return {number}
 */
proto.TechwolfImageInfo.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TechwolfImageInfo.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfImageInfo.prototype.clearHeight = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfImageInfo.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfImage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfImage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfImage.displayName = 'proto.TechwolfImage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfImage.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfImage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfImage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfImage.toObject = function(includeInstance, msg) {
  var f, obj = {
    iid: jspb.Message.getField(msg, 1),
    tinyimage: (f = msg.getTinyimage()) && proto.TechwolfImageInfo.toObject(includeInstance, f),
    originimage: (f = msg.getOriginimage()) && proto.TechwolfImageInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfImage}
 */
proto.TechwolfImage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfImage;
  return proto.TechwolfImage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfImage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfImage}
 */
proto.TechwolfImage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setIid(value);
      break;
    case 2:
      var value = new proto.TechwolfImageInfo;
      reader.readMessage(value,proto.TechwolfImageInfo.deserializeBinaryFromReader);
      msg.setTinyimage(value);
      break;
    case 3:
      var value = new proto.TechwolfImageInfo;
      reader.readMessage(value,proto.TechwolfImageInfo.deserializeBinaryFromReader);
      msg.setOriginimage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfImage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfImage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfImage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfImage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getTinyimage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TechwolfImageInfo.serializeBinaryToWriter
    );
  }
  f = message.getOriginimage();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TechwolfImageInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 iid = 1;
 * @return {number}
 */
proto.TechwolfImage.prototype.getIid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfImage.prototype.setIid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfImage.prototype.clearIid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfImage.prototype.hasIid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TechwolfImageInfo tinyImage = 2;
 * @return {?proto.TechwolfImageInfo}
 */
proto.TechwolfImage.prototype.getTinyimage = function() {
  return /** @type{?proto.TechwolfImageInfo} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfImageInfo, 2));
};


/** @param {?proto.TechwolfImageInfo|undefined} value */
proto.TechwolfImage.prototype.setTinyimage = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TechwolfImage.prototype.clearTinyimage = function() {
  this.setTinyimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfImage.prototype.hasTinyimage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TechwolfImageInfo originImage = 3;
 * @return {?proto.TechwolfImageInfo}
 */
proto.TechwolfImage.prototype.getOriginimage = function() {
  return /** @type{?proto.TechwolfImageInfo} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfImageInfo, 3));
};


/** @param {?proto.TechwolfImageInfo|undefined} value */
proto.TechwolfImage.prototype.setOriginimage = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TechwolfImage.prototype.clearOriginimage = function() {
  this.setOriginimage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfImage.prototype.hasOriginimage = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfAction.displayName = 'proto.TechwolfAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfAction.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    aid: jspb.Message.getField(msg, 1),
    extend: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfAction}
 */
proto.TechwolfAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfAction;
  return proto.TechwolfAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfAction}
 */
proto.TechwolfAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtend(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required int32 aid = 1;
 * @return {number}
 */
proto.TechwolfAction.prototype.getAid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfAction.prototype.setAid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfAction.prototype.clearAid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfAction.prototype.hasAid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string extend = 2;
 * @return {string}
 */
proto.TechwolfAction.prototype.getExtend = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfAction.prototype.setExtend = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfAction.prototype.clearExtend = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfAction.prototype.hasExtend = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfArticle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfArticle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfArticle.displayName = 'proto.TechwolfArticle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfArticle.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfArticle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfArticle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfArticle.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getField(msg, 1),
    description: jspb.Message.getField(msg, 2),
    picurl: jspb.Message.getField(msg, 3),
    url: jspb.Message.getField(msg, 4),
    templateid: jspb.Message.getField(msg, 5),
    bottomtext: jspb.Message.getField(msg, 6),
    timeout: jspb.Message.getField(msg, 7),
    statisticparameters: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfArticle}
 */
proto.TechwolfArticle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfArticle;
  return proto.TechwolfArticle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfArticle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfArticle}
 */
proto.TechwolfArticle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPicurl(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemplateid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBottomtext(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatisticparameters(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfArticle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfArticle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfArticle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfArticle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * required string title = 1;
 * @return {string}
 */
proto.TechwolfArticle.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfArticle.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfArticle.prototype.clearTitle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfArticle.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string description = 2;
 * @return {string}
 */
proto.TechwolfArticle.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfArticle.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfArticle.prototype.clearDescription = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfArticle.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string picUrl = 3;
 * @return {string}
 */
proto.TechwolfArticle.prototype.getPicurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TechwolfArticle.prototype.setPicurl = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfArticle.prototype.clearPicurl = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfArticle.prototype.hasPicurl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string url = 4;
 * @return {string}
 */
proto.TechwolfArticle.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TechwolfArticle.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfArticle.prototype.clearUrl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfArticle.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 templateId = 5;
 * @return {number}
 */
proto.TechwolfArticle.prototype.getTemplateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TechwolfArticle.prototype.setTemplateid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.TechwolfArticle.prototype.clearTemplateid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfArticle.prototype.hasTemplateid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string bottomText = 6;
 * @return {string}
 */
proto.TechwolfArticle.prototype.getBottomtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.TechwolfArticle.prototype.setBottomtext = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.TechwolfArticle.prototype.clearBottomtext = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfArticle.prototype.hasBottomtext = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 timeout = 7;
 * @return {number}
 */
proto.TechwolfArticle.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.TechwolfArticle.prototype.setTimeout = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.TechwolfArticle.prototype.clearTimeout = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfArticle.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string statisticParameters = 8;
 * @return {string}
 */
proto.TechwolfArticle.prototype.getStatisticparameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.TechwolfArticle.prototype.setStatisticparameters = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.TechwolfArticle.prototype.clearStatisticparameters = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfArticle.prototype.hasStatisticparameters = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfNotify.displayName = 'proto.TechwolfNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getField(msg, 1),
    url: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfNotify}
 */
proto.TechwolfNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfNotify;
  return proto.TechwolfNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfNotify}
 */
proto.TechwolfNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string text = 1;
 * @return {string}
 */
proto.TechwolfNotify.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfNotify.prototype.setText = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfNotify.prototype.clearText = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfNotify.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.TechwolfNotify.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfNotify.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfNotify.prototype.clearUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfNotify.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfButton = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfButton, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfButton.displayName = 'proto.TechwolfButton';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfButton.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfButton.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfButton} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfButton.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getField(msg, 1),
    url: jspb.Message.getField(msg, 2),
    templateid: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfButton}
 */
proto.TechwolfButton.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfButton;
  return proto.TechwolfButton.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfButton} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfButton}
 */
proto.TechwolfButton.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemplateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfButton.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfButton.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfButton} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfButton.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * required string text = 1;
 * @return {string}
 */
proto.TechwolfButton.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfButton.prototype.setText = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfButton.prototype.clearText = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfButton.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string url = 2;
 * @return {string}
 */
proto.TechwolfButton.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfButton.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfButton.prototype.clearUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfButton.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional int32 templateId = 3;
 * @return {number}
 */
proto.TechwolfButton.prototype.getTemplateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TechwolfButton.prototype.setTemplateid = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfButton.prototype.clearTemplateid = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfButton.prototype.hasTemplateid = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfDialog = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TechwolfDialog.repeatedFields_, null);
};
goog.inherits(proto.TechwolfDialog, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfDialog.displayName = 'proto.TechwolfDialog';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TechwolfDialog.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfDialog.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfDialog.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfDialog} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfDialog.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getField(msg, 1),
    buttonsList: jspb.Message.toObjectList(msg.getButtonsList(),
    proto.TechwolfButton.toObject, includeInstance),
    operated: jspb.Message.getField(msg, 3),
    clickmore: jspb.Message.getField(msg, 4),
    type: jspb.Message.getField(msg, 5),
    backgroundurl: jspb.Message.getField(msg, 6),
    timeout: jspb.Message.getField(msg, 7),
    statisticparameters: jspb.Message.getField(msg, 8),
    title: jspb.Message.getField(msg, 9),
    url: jspb.Message.getField(msg, 10)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfDialog}
 */
proto.TechwolfDialog.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfDialog;
  return proto.TechwolfDialog.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfDialog} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfDialog}
 */
proto.TechwolfDialog.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = new proto.TechwolfButton;
      reader.readMessage(value,proto.TechwolfButton.deserializeBinaryFromReader);
      msg.addButtons(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOperated(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setClickmore(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setBackgroundurl(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimeout(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatisticparameters(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfDialog.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfDialog.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfDialog} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfDialog.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getButtonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.TechwolfButton.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBool(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
};


/**
 * required string text = 1;
 * @return {string}
 */
proto.TechwolfDialog.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfDialog.prototype.setText = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfDialog.prototype.clearText = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDialog.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TechwolfButton buttons = 2;
 * @return {!Array.<!proto.TechwolfButton>}
 */
proto.TechwolfDialog.prototype.getButtonsList = function() {
  return /** @type{!Array.<!proto.TechwolfButton>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TechwolfButton, 2));
};


/** @param {!Array.<!proto.TechwolfButton>} value */
proto.TechwolfDialog.prototype.setButtonsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.TechwolfButton=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TechwolfButton}
 */
proto.TechwolfDialog.prototype.addButtons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.TechwolfButton, opt_index);
};


proto.TechwolfDialog.prototype.clearButtonsList = function() {
  this.setButtonsList([]);
};


/**
 * required bool operated = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TechwolfDialog.prototype.getOperated = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.TechwolfDialog.prototype.setOperated = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfDialog.prototype.clearOperated = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDialog.prototype.hasOperated = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool clickMore = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TechwolfDialog.prototype.getClickmore = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.TechwolfDialog.prototype.setClickmore = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfDialog.prototype.clearClickmore = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDialog.prototype.hasClickmore = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int32 type = 5;
 * @return {number}
 */
proto.TechwolfDialog.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TechwolfDialog.prototype.setType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.TechwolfDialog.prototype.clearType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDialog.prototype.hasType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string backgroundUrl = 6;
 * @return {string}
 */
proto.TechwolfDialog.prototype.getBackgroundurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.TechwolfDialog.prototype.setBackgroundurl = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.TechwolfDialog.prototype.clearBackgroundurl = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDialog.prototype.hasBackgroundurl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int64 timeout = 7;
 * @return {number}
 */
proto.TechwolfDialog.prototype.getTimeout = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.TechwolfDialog.prototype.setTimeout = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.TechwolfDialog.prototype.clearTimeout = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDialog.prototype.hasTimeout = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string statisticParameters = 8;
 * @return {string}
 */
proto.TechwolfDialog.prototype.getStatisticparameters = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.TechwolfDialog.prototype.setStatisticparameters = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.TechwolfDialog.prototype.clearStatisticparameters = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDialog.prototype.hasStatisticparameters = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string title = 9;
 * @return {string}
 */
proto.TechwolfDialog.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.TechwolfDialog.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.TechwolfDialog.prototype.clearTitle = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDialog.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string url = 10;
 * @return {string}
 */
proto.TechwolfDialog.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.TechwolfDialog.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.TechwolfDialog.prototype.clearUrl = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDialog.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 10) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfJobDesc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfJobDesc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfJobDesc.displayName = 'proto.TechwolfJobDesc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfJobDesc.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfJobDesc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfJobDesc} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfJobDesc.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getField(msg, 1),
    company: jspb.Message.getField(msg, 2),
    salary: jspb.Message.getField(msg, 3),
    url: jspb.Message.getField(msg, 4),
    jobid: jspb.Message.getField(msg, 5),
    positioncategory: jspb.Message.getField(msg, 6),
    experience: jspb.Message.getField(msg, 7),
    education: jspb.Message.getField(msg, 8),
    city: jspb.Message.getField(msg, 9),
    bosstitle: jspb.Message.getField(msg, 10),
    boss: (f = msg.getBoss()) && proto.TechwolfUser.toObject(includeInstance, f),
    lid: jspb.Message.getField(msg, 12),
    stage: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfJobDesc}
 */
proto.TechwolfJobDesc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfJobDesc;
  return proto.TechwolfJobDesc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfJobDesc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfJobDesc}
 */
proto.TechwolfJobDesc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSalary(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setJobid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setPositioncategory(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setExperience(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setEducation(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setBosstitle(value);
      break;
    case 11:
      var value = new proto.TechwolfUser;
      reader.readMessage(value,proto.TechwolfUser.deserializeBinaryFromReader);
      msg.setBoss(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setLid(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setStage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfJobDesc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfJobDesc.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfJobDesc} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfJobDesc.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getBoss();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.TechwolfUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * required string title = 1;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfJobDesc.prototype.clearTitle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string company = 2;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setCompany = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfJobDesc.prototype.clearCompany = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasCompany = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string salary = 3;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getSalary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setSalary = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfJobDesc.prototype.clearSalary = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasSalary = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string url = 4;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfJobDesc.prototype.clearUrl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int64 jobId = 5;
 * @return {number}
 */
proto.TechwolfJobDesc.prototype.getJobid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TechwolfJobDesc.prototype.setJobid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.TechwolfJobDesc.prototype.clearJobid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasJobid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string positionCategory = 6;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getPositioncategory = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setPositioncategory = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.TechwolfJobDesc.prototype.clearPositioncategory = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasPositioncategory = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string experience = 7;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getExperience = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setExperience = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.TechwolfJobDesc.prototype.clearExperience = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasExperience = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string education = 8;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getEducation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setEducation = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.TechwolfJobDesc.prototype.clearEducation = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasEducation = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string city = 9;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setCity = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.TechwolfJobDesc.prototype.clearCity = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasCity = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string bossTitle = 10;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getBosstitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setBosstitle = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.TechwolfJobDesc.prototype.clearBosstitle = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasBosstitle = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional TechwolfUser boss = 11;
 * @return {?proto.TechwolfUser}
 */
proto.TechwolfJobDesc.prototype.getBoss = function() {
  return /** @type{?proto.TechwolfUser} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfUser, 11));
};


/** @param {?proto.TechwolfUser|undefined} value */
proto.TechwolfJobDesc.prototype.setBoss = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.TechwolfJobDesc.prototype.clearBoss = function() {
  this.setBoss(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasBoss = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string lid = 12;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getLid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setLid = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.TechwolfJobDesc.prototype.clearLid = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasLid = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string stage = 13;
 * @return {string}
 */
proto.TechwolfJobDesc.prototype.getStage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.TechwolfJobDesc.prototype.setStage = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.TechwolfJobDesc.prototype.clearStage = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfJobDesc.prototype.hasStage = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfResume = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TechwolfResume.repeatedFields_, null);
};
goog.inherits(proto.TechwolfResume, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfResume.displayName = 'proto.TechwolfResume';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TechwolfResume.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfResume.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfResume.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfResume} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfResume.toObject = function(includeInstance, msg) {
  var f, obj = {
    user: (f = msg.getUser()) && proto.TechwolfUser.toObject(includeInstance, f),
    description: jspb.Message.getField(msg, 2),
    city: jspb.Message.getField(msg, 3),
    position: jspb.Message.getField(msg, 4),
    keywordsList: jspb.Message.getRepeatedField(msg, 5),
    expectid: jspb.Message.getField(msg, 6),
    lid: jspb.Message.getField(msg, 7),
    gender: jspb.Message.getField(msg, 8),
    salary: jspb.Message.getField(msg, 9),
    workyear: jspb.Message.getField(msg, 10),
    content1: jspb.Message.getField(msg, 11),
    content2: jspb.Message.getField(msg, 12),
    education: jspb.Message.getField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfResume}
 */
proto.TechwolfResume.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfResume;
  return proto.TechwolfResume.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfResume} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfResume}
 */
proto.TechwolfResume.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TechwolfUser;
      reader.readMessage(value,proto.TechwolfUser.deserializeBinaryFromReader);
      msg.setUser(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setCity(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPosition(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.addKeywords(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setExpectid(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGender(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setSalary(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setWorkyear(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent1(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setContent2(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setEducation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfResume.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfResume.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfResume} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfResume.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUser();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TechwolfUser.serializeBinaryToWriter
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getKeywordsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * required TechwolfUser user = 1;
 * @return {!proto.TechwolfUser}
 */
proto.TechwolfResume.prototype.getUser = function() {
  return /** @type{!proto.TechwolfUser} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfUser, 1, 1));
};


/** @param {!proto.TechwolfUser} value */
proto.TechwolfResume.prototype.setUser = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TechwolfResume.prototype.clearUser = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasUser = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string description = 2;
 * @return {string}
 */
proto.TechwolfResume.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfResume.prototype.setDescription = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfResume.prototype.clearDescription = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string city = 3;
 * @return {string}
 */
proto.TechwolfResume.prototype.getCity = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TechwolfResume.prototype.setCity = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfResume.prototype.clearCity = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasCity = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string position = 4;
 * @return {string}
 */
proto.TechwolfResume.prototype.getPosition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TechwolfResume.prototype.setPosition = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfResume.prototype.clearPosition = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasPosition = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated string keywords = 5;
 * @return {!Array.<string>}
 */
proto.TechwolfResume.prototype.getKeywordsList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<string>} value */
proto.TechwolfResume.prototype.setKeywordsList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.TechwolfResume.prototype.addKeywords = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.TechwolfResume.prototype.clearKeywordsList = function() {
  this.setKeywordsList([]);
};


/**
 * optional int64 expectId = 6;
 * @return {number}
 */
proto.TechwolfResume.prototype.getExpectid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.TechwolfResume.prototype.setExpectid = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.TechwolfResume.prototype.clearExpectid = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasExpectid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string lid = 7;
 * @return {string}
 */
proto.TechwolfResume.prototype.getLid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.TechwolfResume.prototype.setLid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.TechwolfResume.prototype.clearLid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasLid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional int32 gender = 8;
 * @return {number}
 */
proto.TechwolfResume.prototype.getGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.TechwolfResume.prototype.setGender = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.TechwolfResume.prototype.clearGender = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasGender = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string salary = 9;
 * @return {string}
 */
proto.TechwolfResume.prototype.getSalary = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.TechwolfResume.prototype.setSalary = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.TechwolfResume.prototype.clearSalary = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasSalary = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string workYear = 10;
 * @return {string}
 */
proto.TechwolfResume.prototype.getWorkyear = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.TechwolfResume.prototype.setWorkyear = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.TechwolfResume.prototype.clearWorkyear = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasWorkyear = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string content1 = 11;
 * @return {string}
 */
proto.TechwolfResume.prototype.getContent1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.TechwolfResume.prototype.setContent1 = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.TechwolfResume.prototype.clearContent1 = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasContent1 = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string content2 = 12;
 * @return {string}
 */
proto.TechwolfResume.prototype.getContent2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.TechwolfResume.prototype.setContent2 = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.TechwolfResume.prototype.clearContent2 = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasContent2 = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string education = 13;
 * @return {string}
 */
proto.TechwolfResume.prototype.getEducation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/** @param {string} value */
proto.TechwolfResume.prototype.setEducation = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.TechwolfResume.prototype.clearEducation = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfResume.prototype.hasEducation = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfHyperLink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfHyperLink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfHyperLink.displayName = 'proto.TechwolfHyperLink';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfHyperLink.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfHyperLink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfHyperLink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfHyperLink.toObject = function(includeInstance, msg) {
  var f, obj = {
    text: jspb.Message.getField(msg, 1),
    url: jspb.Message.getField(msg, 2),
    hyperlinktype: jspb.Message.getField(msg, 3),
    extrajson: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfHyperLink}
 */
proto.TechwolfHyperLink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfHyperLink;
  return proto.TechwolfHyperLink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfHyperLink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfHyperLink}
 */
proto.TechwolfHyperLink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setHyperlinktype(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setExtrajson(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfHyperLink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfHyperLink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfHyperLink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfHyperLink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required string text = 1;
 * @return {string}
 */
proto.TechwolfHyperLink.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfHyperLink.prototype.setText = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfHyperLink.prototype.clearText = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfHyperLink.prototype.hasText = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string url = 2;
 * @return {string}
 */
proto.TechwolfHyperLink.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfHyperLink.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfHyperLink.prototype.clearUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfHyperLink.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 hyperLinkType = 3;
 * @return {number}
 */
proto.TechwolfHyperLink.prototype.getHyperlinktype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TechwolfHyperLink.prototype.setHyperlinktype = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfHyperLink.prototype.clearHyperlinktype = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfHyperLink.prototype.hasHyperlinktype = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string extraJson = 4;
 * @return {string}
 */
proto.TechwolfHyperLink.prototype.getExtrajson = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TechwolfHyperLink.prototype.setExtrajson = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfHyperLink.prototype.clearExtrajson = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfHyperLink.prototype.hasExtrajson = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfMessageBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TechwolfMessageBody.repeatedFields_, null);
};
goog.inherits(proto.TechwolfMessageBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfMessageBody.displayName = 'proto.TechwolfMessageBody';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TechwolfMessageBody.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfMessageBody.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfMessageBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfMessageBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfMessageBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    templateid: jspb.Message.getField(msg, 2),
    headtitle: jspb.Message.getField(msg, 11),
    text: jspb.Message.getField(msg, 3),
    sound: (f = msg.getSound()) && proto.TechwolfSound.toObject(includeInstance, f),
    image: (f = msg.getImage()) && proto.TechwolfImage.toObject(includeInstance, f),
    action: (f = msg.getAction()) && proto.TechwolfAction.toObject(includeInstance, f),
    articlesList: jspb.Message.toObjectList(msg.getArticlesList(),
    proto.TechwolfArticle.toObject, includeInstance),
    notify: (f = msg.getNotify()) && proto.TechwolfNotify.toObject(includeInstance, f),
    dialog: (f = msg.getDialog()) && proto.TechwolfDialog.toObject(includeInstance, f),
    jobdesc: (f = msg.getJobdesc()) && proto.TechwolfJobDesc.toObject(includeInstance, f),
    resume: (f = msg.getResume()) && proto.TechwolfResume.toObject(includeInstance, f),
    redenvelope: (f = msg.getRedenvelope()) && proto.TechwolfRedEnvelope.toObject(includeInstance, f),
    orderdetail: (f = msg.getOrderdetail()) && proto.TechwolfOrderDetail.toObject(includeInstance, f),
    hyperlink: (f = msg.getHyperlink()) && proto.TechwolfHyperLink.toObject(includeInstance, f),
    video: (f = msg.getVideo()) && proto.TechwolfVideo.toObject(includeInstance, f),
    interview: (f = msg.getInterview()) && proto.TechwolfInterview.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfMessageBody}
 */
proto.TechwolfMessageBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfMessageBody;
  return proto.TechwolfMessageBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfMessageBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfMessageBody}
 */
proto.TechwolfMessageBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemplateid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeadtitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    case 4:
      var value = new proto.TechwolfSound;
      reader.readMessage(value,proto.TechwolfSound.deserializeBinaryFromReader);
      msg.setSound(value);
      break;
    case 5:
      var value = new proto.TechwolfImage;
      reader.readMessage(value,proto.TechwolfImage.deserializeBinaryFromReader);
      msg.setImage(value);
      break;
    case 6:
      var value = new proto.TechwolfAction;
      reader.readMessage(value,proto.TechwolfAction.deserializeBinaryFromReader);
      msg.setAction(value);
      break;
    case 7:
      var value = new proto.TechwolfArticle;
      reader.readMessage(value,proto.TechwolfArticle.deserializeBinaryFromReader);
      msg.addArticles(value);
      break;
    case 8:
      var value = new proto.TechwolfNotify;
      reader.readMessage(value,proto.TechwolfNotify.deserializeBinaryFromReader);
      msg.setNotify(value);
      break;
    case 9:
      var value = new proto.TechwolfDialog;
      reader.readMessage(value,proto.TechwolfDialog.deserializeBinaryFromReader);
      msg.setDialog(value);
      break;
    case 10:
      var value = new proto.TechwolfJobDesc;
      reader.readMessage(value,proto.TechwolfJobDesc.deserializeBinaryFromReader);
      msg.setJobdesc(value);
      break;
    case 12:
      var value = new proto.TechwolfResume;
      reader.readMessage(value,proto.TechwolfResume.deserializeBinaryFromReader);
      msg.setResume(value);
      break;
    case 13:
      var value = new proto.TechwolfRedEnvelope;
      reader.readMessage(value,proto.TechwolfRedEnvelope.deserializeBinaryFromReader);
      msg.setRedenvelope(value);
      break;
    case 14:
      var value = new proto.TechwolfOrderDetail;
      reader.readMessage(value,proto.TechwolfOrderDetail.deserializeBinaryFromReader);
      msg.setOrderdetail(value);
      break;
    case 15:
      var value = new proto.TechwolfHyperLink;
      reader.readMessage(value,proto.TechwolfHyperLink.deserializeBinaryFromReader);
      msg.setHyperlink(value);
      break;
    case 16:
      var value = new proto.TechwolfVideo;
      reader.readMessage(value,proto.TechwolfVideo.deserializeBinaryFromReader);
      msg.setVideo(value);
      break;
    case 17:
      var value = new proto.TechwolfInterview;
      reader.readMessage(value,proto.TechwolfInterview.deserializeBinaryFromReader);
      msg.setInterview(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfMessageBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfMessageBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfMessageBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfMessageBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getSound();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.TechwolfSound.serializeBinaryToWriter
    );
  }
  f = message.getImage();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.TechwolfImage.serializeBinaryToWriter
    );
  }
  f = message.getAction();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.TechwolfAction.serializeBinaryToWriter
    );
  }
  f = message.getArticlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.TechwolfArticle.serializeBinaryToWriter
    );
  }
  f = message.getNotify();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.TechwolfNotify.serializeBinaryToWriter
    );
  }
  f = message.getDialog();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.TechwolfDialog.serializeBinaryToWriter
    );
  }
  f = message.getJobdesc();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.TechwolfJobDesc.serializeBinaryToWriter
    );
  }
  f = message.getResume();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.TechwolfResume.serializeBinaryToWriter
    );
  }
  f = message.getRedenvelope();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.TechwolfRedEnvelope.serializeBinaryToWriter
    );
  }
  f = message.getOrderdetail();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.TechwolfOrderDetail.serializeBinaryToWriter
    );
  }
  f = message.getHyperlink();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.TechwolfHyperLink.serializeBinaryToWriter
    );
  }
  f = message.getVideo();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.TechwolfVideo.serializeBinaryToWriter
    );
  }
  f = message.getInterview();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.TechwolfInterview.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.TechwolfMessageBody.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfMessageBody.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfMessageBody.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 templateId = 2;
 * @return {number}
 */
proto.TechwolfMessageBody.prototype.getTemplateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TechwolfMessageBody.prototype.setTemplateid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfMessageBody.prototype.clearTemplateid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasTemplateid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string headTitle = 11;
 * @return {string}
 */
proto.TechwolfMessageBody.prototype.getHeadtitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.TechwolfMessageBody.prototype.setHeadtitle = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.TechwolfMessageBody.prototype.clearHeadtitle = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasHeadtitle = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.TechwolfMessageBody.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TechwolfMessageBody.prototype.setText = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfMessageBody.prototype.clearText = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasText = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TechwolfSound sound = 4;
 * @return {?proto.TechwolfSound}
 */
proto.TechwolfMessageBody.prototype.getSound = function() {
  return /** @type{?proto.TechwolfSound} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfSound, 4));
};


/** @param {?proto.TechwolfSound|undefined} value */
proto.TechwolfMessageBody.prototype.setSound = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.TechwolfMessageBody.prototype.clearSound = function() {
  this.setSound(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasSound = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TechwolfImage image = 5;
 * @return {?proto.TechwolfImage}
 */
proto.TechwolfMessageBody.prototype.getImage = function() {
  return /** @type{?proto.TechwolfImage} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfImage, 5));
};


/** @param {?proto.TechwolfImage|undefined} value */
proto.TechwolfMessageBody.prototype.setImage = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.TechwolfMessageBody.prototype.clearImage = function() {
  this.setImage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasImage = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TechwolfAction action = 6;
 * @return {?proto.TechwolfAction}
 */
proto.TechwolfMessageBody.prototype.getAction = function() {
  return /** @type{?proto.TechwolfAction} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfAction, 6));
};


/** @param {?proto.TechwolfAction|undefined} value */
proto.TechwolfMessageBody.prototype.setAction = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.TechwolfMessageBody.prototype.clearAction = function() {
  this.setAction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasAction = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated TechwolfArticle articles = 7;
 * @return {!Array.<!proto.TechwolfArticle>}
 */
proto.TechwolfMessageBody.prototype.getArticlesList = function() {
  return /** @type{!Array.<!proto.TechwolfArticle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TechwolfArticle, 7));
};


/** @param {!Array.<!proto.TechwolfArticle>} value */
proto.TechwolfMessageBody.prototype.setArticlesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.TechwolfArticle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TechwolfArticle}
 */
proto.TechwolfMessageBody.prototype.addArticles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.TechwolfArticle, opt_index);
};


proto.TechwolfMessageBody.prototype.clearArticlesList = function() {
  this.setArticlesList([]);
};


/**
 * optional TechwolfNotify notify = 8;
 * @return {?proto.TechwolfNotify}
 */
proto.TechwolfMessageBody.prototype.getNotify = function() {
  return /** @type{?proto.TechwolfNotify} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfNotify, 8));
};


/** @param {?proto.TechwolfNotify|undefined} value */
proto.TechwolfMessageBody.prototype.setNotify = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.TechwolfMessageBody.prototype.clearNotify = function() {
  this.setNotify(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasNotify = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional TechwolfDialog dialog = 9;
 * @return {?proto.TechwolfDialog}
 */
proto.TechwolfMessageBody.prototype.getDialog = function() {
  return /** @type{?proto.TechwolfDialog} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfDialog, 9));
};


/** @param {?proto.TechwolfDialog|undefined} value */
proto.TechwolfMessageBody.prototype.setDialog = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.TechwolfMessageBody.prototype.clearDialog = function() {
  this.setDialog(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasDialog = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional TechwolfJobDesc jobDesc = 10;
 * @return {?proto.TechwolfJobDesc}
 */
proto.TechwolfMessageBody.prototype.getJobdesc = function() {
  return /** @type{?proto.TechwolfJobDesc} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfJobDesc, 10));
};


/** @param {?proto.TechwolfJobDesc|undefined} value */
proto.TechwolfMessageBody.prototype.setJobdesc = function(value) {
  jspb.Message.setWrapperField(this, 10, value);
};


proto.TechwolfMessageBody.prototype.clearJobdesc = function() {
  this.setJobdesc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasJobdesc = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional TechwolfResume resume = 12;
 * @return {?proto.TechwolfResume}
 */
proto.TechwolfMessageBody.prototype.getResume = function() {
  return /** @type{?proto.TechwolfResume} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfResume, 12));
};


/** @param {?proto.TechwolfResume|undefined} value */
proto.TechwolfMessageBody.prototype.setResume = function(value) {
  jspb.Message.setWrapperField(this, 12, value);
};


proto.TechwolfMessageBody.prototype.clearResume = function() {
  this.setResume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasResume = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional TechwolfRedEnvelope redEnvelope = 13;
 * @return {?proto.TechwolfRedEnvelope}
 */
proto.TechwolfMessageBody.prototype.getRedenvelope = function() {
  return /** @type{?proto.TechwolfRedEnvelope} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfRedEnvelope, 13));
};


/** @param {?proto.TechwolfRedEnvelope|undefined} value */
proto.TechwolfMessageBody.prototype.setRedenvelope = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.TechwolfMessageBody.prototype.clearRedenvelope = function() {
  this.setRedenvelope(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasRedenvelope = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional TechwolfOrderDetail orderDetail = 14;
 * @return {?proto.TechwolfOrderDetail}
 */
proto.TechwolfMessageBody.prototype.getOrderdetail = function() {
  return /** @type{?proto.TechwolfOrderDetail} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfOrderDetail, 14));
};


/** @param {?proto.TechwolfOrderDetail|undefined} value */
proto.TechwolfMessageBody.prototype.setOrderdetail = function(value) {
  jspb.Message.setWrapperField(this, 14, value);
};


proto.TechwolfMessageBody.prototype.clearOrderdetail = function() {
  this.setOrderdetail(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasOrderdetail = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional TechwolfHyperLink hyperLink = 15;
 * @return {?proto.TechwolfHyperLink}
 */
proto.TechwolfMessageBody.prototype.getHyperlink = function() {
  return /** @type{?proto.TechwolfHyperLink} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfHyperLink, 15));
};


/** @param {?proto.TechwolfHyperLink|undefined} value */
proto.TechwolfMessageBody.prototype.setHyperlink = function(value) {
  jspb.Message.setWrapperField(this, 15, value);
};


proto.TechwolfMessageBody.prototype.clearHyperlink = function() {
  this.setHyperlink(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasHyperlink = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional TechwolfVideo video = 16;
 * @return {?proto.TechwolfVideo}
 */
proto.TechwolfMessageBody.prototype.getVideo = function() {
  return /** @type{?proto.TechwolfVideo} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfVideo, 16));
};


/** @param {?proto.TechwolfVideo|undefined} value */
proto.TechwolfMessageBody.prototype.setVideo = function(value) {
  jspb.Message.setWrapperField(this, 16, value);
};


proto.TechwolfMessageBody.prototype.clearVideo = function() {
  this.setVideo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasVideo = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional TechwolfInterview interview = 17;
 * @return {?proto.TechwolfInterview}
 */
proto.TechwolfMessageBody.prototype.getInterview = function() {
  return /** @type{?proto.TechwolfInterview} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfInterview, 17));
};


/** @param {?proto.TechwolfInterview|undefined} value */
proto.TechwolfMessageBody.prototype.setInterview = function(value) {
  jspb.Message.setWrapperField(this, 17, value);
};


proto.TechwolfMessageBody.prototype.clearInterview = function() {
  this.setInterview(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageBody.prototype.hasInterview = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfMessage.displayName = 'proto.TechwolfMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: (f = msg.getFrom()) && proto.TechwolfUser.toObject(includeInstance, f),
    to: (f = msg.getTo()) && proto.TechwolfUser.toObject(includeInstance, f),
    type: jspb.Message.getField(msg, 3),
    mid: jspb.Message.getField(msg, 4),
    time: jspb.Message.getField(msg, 5),
    body: (f = msg.getBody()) && proto.TechwolfMessageBody.toObject(includeInstance, f),
    offline: jspb.Message.getField(msg, 7),
    received: jspb.Message.getField(msg, 8),
    pushtext: jspb.Message.getField(msg, 9),
    taskid: jspb.Message.getField(msg, 10),
    cmid: jspb.Message.getField(msg, 11),
    status: jspb.Message.getField(msg, 12),
    uncount: jspb.Message.getField(msg, 13),
    pushsound: jspb.Message.getField(msg, 14)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfMessage}
 */
proto.TechwolfMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfMessage;
  return proto.TechwolfMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfMessage}
 */
proto.TechwolfMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TechwolfUser;
      reader.readMessage(value,proto.TechwolfUser.deserializeBinaryFromReader);
      msg.setFrom(value);
      break;
    case 2:
      var value = new proto.TechwolfUser;
      reader.readMessage(value,proto.TechwolfUser.deserializeBinaryFromReader);
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    case 6:
      var value = new proto.TechwolfMessageBody;
      reader.readMessage(value,proto.TechwolfMessageBody.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setOffline(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setReceived(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setPushtext(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTaskid(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCmid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStatus(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUncount(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPushsound(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TechwolfUser.serializeBinaryToWriter
    );
  }
  f = message.getTo();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TechwolfUser.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.TechwolfMessageBody.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeBool(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeInt32(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeInt32(
      13,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 14));
  if (f != null) {
    writer.writeInt32(
      14,
      f
    );
  }
};


/**
 * required TechwolfUser from = 1;
 * @return {!proto.TechwolfUser}
 */
proto.TechwolfMessage.prototype.getFrom = function() {
  return /** @type{!proto.TechwolfUser} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfUser, 1, 1));
};


/** @param {!proto.TechwolfUser} value */
proto.TechwolfMessage.prototype.setFrom = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TechwolfMessage.prototype.clearFrom = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasFrom = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required TechwolfUser to = 2;
 * @return {!proto.TechwolfUser}
 */
proto.TechwolfMessage.prototype.getTo = function() {
  return /** @type{!proto.TechwolfUser} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfUser, 2, 1));
};


/** @param {!proto.TechwolfUser} value */
proto.TechwolfMessage.prototype.setTo = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TechwolfMessage.prototype.clearTo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasTo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 type = 3;
 * @return {number}
 */
proto.TechwolfMessage.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TechwolfMessage.prototype.setType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfMessage.prototype.clearType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional int64 mid = 4;
 * @return {number}
 */
proto.TechwolfMessage.prototype.getMid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.TechwolfMessage.prototype.setMid = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfMessage.prototype.clearMid = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasMid = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 time = 5;
 * @return {number}
 */
proto.TechwolfMessage.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TechwolfMessage.prototype.setTime = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.TechwolfMessage.prototype.clearTime = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasTime = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required TechwolfMessageBody body = 6;
 * @return {!proto.TechwolfMessageBody}
 */
proto.TechwolfMessage.prototype.getBody = function() {
  return /** @type{!proto.TechwolfMessageBody} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfMessageBody, 6, 1));
};


/** @param {!proto.TechwolfMessageBody} value */
proto.TechwolfMessage.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.TechwolfMessage.prototype.clearBody = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasBody = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool offline = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TechwolfMessage.prototype.getOffline = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.TechwolfMessage.prototype.setOffline = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.TechwolfMessage.prototype.clearOffline = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasOffline = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bool received = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TechwolfMessage.prototype.getReceived = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.TechwolfMessage.prototype.setReceived = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.TechwolfMessage.prototype.clearReceived = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasReceived = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string pushText = 9;
 * @return {string}
 */
proto.TechwolfMessage.prototype.getPushtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.TechwolfMessage.prototype.setPushtext = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.TechwolfMessage.prototype.clearPushtext = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasPushtext = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional int64 taskId = 10;
 * @return {number}
 */
proto.TechwolfMessage.prototype.getTaskid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.TechwolfMessage.prototype.setTaskid = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.TechwolfMessage.prototype.clearTaskid = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasTaskid = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional int64 cmid = 11;
 * @return {number}
 */
proto.TechwolfMessage.prototype.getCmid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.TechwolfMessage.prototype.setCmid = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.TechwolfMessage.prototype.clearCmid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasCmid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional int32 status = 12;
 * @return {number}
 */
proto.TechwolfMessage.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 12, 0));
};


/** @param {number} value */
proto.TechwolfMessage.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.TechwolfMessage.prototype.clearStatus = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional int32 uncount = 13;
 * @return {number}
 */
proto.TechwolfMessage.prototype.getUncount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.TechwolfMessage.prototype.setUncount = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.TechwolfMessage.prototype.clearUncount = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasUncount = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional int32 pushSound = 14;
 * @return {number}
 */
proto.TechwolfMessage.prototype.getPushsound = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.TechwolfMessage.prototype.setPushsound = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.TechwolfMessage.prototype.clearPushsound = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessage.prototype.hasPushsound = function() {
  return jspb.Message.getField(this, 14) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfClientInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfClientInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfClientInfo.displayName = 'proto.TechwolfClientInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfClientInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfClientInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfClientInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfClientInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getField(msg, 1),
    system: jspb.Message.getField(msg, 2),
    systemversion: jspb.Message.getField(msg, 3),
    model: jspb.Message.getField(msg, 4),
    uniqid: jspb.Message.getField(msg, 5),
    network: jspb.Message.getField(msg, 6),
    appid: jspb.Message.getField(msg, 7),
    platform: jspb.Message.getField(msg, 8),
    channel: jspb.Message.getField(msg, 9),
    ssid: jspb.Message.getField(msg, 10),
    bssid: jspb.Message.getField(msg, 11),
    longitude: jspb.Message.getOptionalFloatingPointField(msg, 12),
    latitude: jspb.Message.getOptionalFloatingPointField(msg, 13)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfClientInfo}
 */
proto.TechwolfClientInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfClientInfo;
  return proto.TechwolfClientInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfClientInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfClientInfo}
 */
proto.TechwolfClientInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystem(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSystemversion(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUniqid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setNetwork(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAppid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setChannel(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setBssid(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLongitude(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLatitude(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfClientInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfClientInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfClientInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfClientInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeString(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 12));
  if (f != null) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 13));
  if (f != null) {
    writer.writeDouble(
      13,
      f
    );
  }
};


/**
 * optional string version = 1;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfClientInfo.prototype.clearVersion = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string system = 2;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getSystem = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setSystem = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfClientInfo.prototype.clearSystem = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasSystem = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string systemVersion = 3;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getSystemversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setSystemversion = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfClientInfo.prototype.clearSystemversion = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasSystemversion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string model = 4;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setModel = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfClientInfo.prototype.clearModel = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasModel = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string uniqid = 5;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getUniqid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setUniqid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.TechwolfClientInfo.prototype.clearUniqid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasUniqid = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string network = 6;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getNetwork = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setNetwork = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.TechwolfClientInfo.prototype.clearNetwork = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasNetwork = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 appid = 7;
 * @return {number}
 */
proto.TechwolfClientInfo.prototype.getAppid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.TechwolfClientInfo.prototype.setAppid = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.TechwolfClientInfo.prototype.clearAppid = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasAppid = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional string platform = 8;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setPlatform = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.TechwolfClientInfo.prototype.clearPlatform = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasPlatform = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string channel = 9;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getChannel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setChannel = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.TechwolfClientInfo.prototype.clearChannel = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasChannel = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional string ssid = 10;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setSsid = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.TechwolfClientInfo.prototype.clearSsid = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasSsid = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string bssid = 11;
 * @return {string}
 */
proto.TechwolfClientInfo.prototype.getBssid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.TechwolfClientInfo.prototype.setBssid = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.TechwolfClientInfo.prototype.clearBssid = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasBssid = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional double longitude = 12;
 * @return {number}
 */
proto.TechwolfClientInfo.prototype.getLongitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 12, 0.0));
};


/** @param {number} value */
proto.TechwolfClientInfo.prototype.setLongitude = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.TechwolfClientInfo.prototype.clearLongitude = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasLongitude = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional double latitude = 13;
 * @return {number}
 */
proto.TechwolfClientInfo.prototype.getLatitude = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 13, 0.0));
};


/** @param {number} value */
proto.TechwolfClientInfo.prototype.setLatitude = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.TechwolfClientInfo.prototype.clearLatitude = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientInfo.prototype.hasLatitude = function() {
  return jspb.Message.getField(this, 13) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfClientTime = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfClientTime, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfClientTime.displayName = 'proto.TechwolfClientTime';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfClientTime.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfClientTime.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfClientTime} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfClientTime.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getField(msg, 1),
    resumetime: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfClientTime}
 */
proto.TechwolfClientTime.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfClientTime;
  return proto.TechwolfClientTime.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfClientTime} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfClientTime}
 */
proto.TechwolfClientTime.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setResumetime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfClientTime.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfClientTime.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfClientTime} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfClientTime.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 startTime = 1;
 * @return {number}
 */
proto.TechwolfClientTime.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfClientTime.prototype.setStarttime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfClientTime.prototype.clearStarttime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientTime.prototype.hasStarttime = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 resumeTime = 2;
 * @return {number}
 */
proto.TechwolfClientTime.prototype.getResumetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TechwolfClientTime.prototype.setResumetime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfClientTime.prototype.clearResumetime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfClientTime.prototype.hasResumetime = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfPresence = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfPresence, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfPresence.displayName = 'proto.TechwolfPresence';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfPresence.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfPresence.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfPresence} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfPresence.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    uid: jspb.Message.getField(msg, 2),
    clientinfo: (f = msg.getClientinfo()) && proto.TechwolfClientInfo.toObject(includeInstance, f),
    clienttime: (f = msg.getClienttime()) && proto.TechwolfClientTime.toObject(includeInstance, f),
    lastmessageid: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfPresence}
 */
proto.TechwolfPresence.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfPresence;
  return proto.TechwolfPresence.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfPresence} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfPresence}
 */
proto.TechwolfPresence.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUid(value);
      break;
    case 3:
      var value = new proto.TechwolfClientInfo;
      reader.readMessage(value,proto.TechwolfClientInfo.deserializeBinaryFromReader);
      msg.setClientinfo(value);
      break;
    case 4:
      var value = new proto.TechwolfClientTime;
      reader.readMessage(value,proto.TechwolfClientTime.deserializeBinaryFromReader);
      msg.setClienttime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastmessageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfPresence.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfPresence.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfPresence} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfPresence.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getClientinfo();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.TechwolfClientInfo.serializeBinaryToWriter
    );
  }
  f = message.getClienttime();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.TechwolfClientTime.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.TechwolfPresence.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfPresence.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfPresence.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfPresence.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 uid = 2;
 * @return {number}
 */
proto.TechwolfPresence.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TechwolfPresence.prototype.setUid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfPresence.prototype.clearUid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfPresence.prototype.hasUid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional TechwolfClientInfo clientInfo = 3;
 * @return {?proto.TechwolfClientInfo}
 */
proto.TechwolfPresence.prototype.getClientinfo = function() {
  return /** @type{?proto.TechwolfClientInfo} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfClientInfo, 3));
};


/** @param {?proto.TechwolfClientInfo|undefined} value */
proto.TechwolfPresence.prototype.setClientinfo = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.TechwolfPresence.prototype.clearClientinfo = function() {
  this.setClientinfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfPresence.prototype.hasClientinfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TechwolfClientTime clientTime = 4;
 * @return {?proto.TechwolfClientTime}
 */
proto.TechwolfPresence.prototype.getClienttime = function() {
  return /** @type{?proto.TechwolfClientTime} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfClientTime, 4));
};


/** @param {?proto.TechwolfClientTime|undefined} value */
proto.TechwolfPresence.prototype.setClienttime = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.TechwolfPresence.prototype.clearClienttime = function() {
  this.setClienttime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfPresence.prototype.hasClienttime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional int64 lastMessageId = 5;
 * @return {number}
 */
proto.TechwolfPresence.prototype.getLastmessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.TechwolfPresence.prototype.setLastmessageid = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.TechwolfPresence.prototype.clearLastmessageid = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfPresence.prototype.hasLastmessageid = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfKVEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfKVEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfKVEntry.displayName = 'proto.TechwolfKVEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfKVEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfKVEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfKVEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfKVEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: jspb.Message.getField(msg, 1),
    value: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfKVEntry}
 */
proto.TechwolfKVEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfKVEntry;
  return proto.TechwolfKVEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfKVEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfKVEntry}
 */
proto.TechwolfKVEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfKVEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfKVEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfKVEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfKVEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required string key = 1;
 * @return {string}
 */
proto.TechwolfKVEntry.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfKVEntry.prototype.setKey = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfKVEntry.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfKVEntry.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string value = 2;
 * @return {string}
 */
proto.TechwolfKVEntry.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfKVEntry.prototype.setValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfKVEntry.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfKVEntry.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfIq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TechwolfIq.repeatedFields_, null);
};
goog.inherits(proto.TechwolfIq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfIq.displayName = 'proto.TechwolfIq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TechwolfIq.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfIq.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfIq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfIq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfIq.toObject = function(includeInstance, msg) {
  var f, obj = {
    qid: jspb.Message.getField(msg, 1),
    query: jspb.Message.getField(msg, 2),
    paramsList: jspb.Message.toObjectList(msg.getParamsList(),
    proto.TechwolfKVEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfIq}
 */
proto.TechwolfIq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfIq;
  return proto.TechwolfIq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfIq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfIq}
 */
proto.TechwolfIq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = new proto.TechwolfKVEntry;
      reader.readMessage(value,proto.TechwolfKVEntry.deserializeBinaryFromReader);
      msg.addParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfIq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfIq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfIq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfIq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.TechwolfKVEntry.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 qid = 1;
 * @return {number}
 */
proto.TechwolfIq.prototype.getQid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfIq.prototype.setQid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfIq.prototype.clearQid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfIq.prototype.hasQid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string query = 2;
 * @return {string}
 */
proto.TechwolfIq.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfIq.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfIq.prototype.clearQuery = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfIq.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TechwolfKVEntry params = 3;
 * @return {!Array.<!proto.TechwolfKVEntry>}
 */
proto.TechwolfIq.prototype.getParamsList = function() {
  return /** @type{!Array.<!proto.TechwolfKVEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TechwolfKVEntry, 3));
};


/** @param {!Array.<!proto.TechwolfKVEntry>} value */
proto.TechwolfIq.prototype.setParamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.TechwolfKVEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TechwolfKVEntry}
 */
proto.TechwolfIq.prototype.addParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.TechwolfKVEntry, opt_index);
};


proto.TechwolfIq.prototype.clearParamsList = function() {
  this.setParamsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfIqResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TechwolfIqResponse.repeatedFields_, null);
};
goog.inherits(proto.TechwolfIqResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfIqResponse.displayName = 'proto.TechwolfIqResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TechwolfIqResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfIqResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfIqResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfIqResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfIqResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    qid: jspb.Message.getField(msg, 1),
    query: jspb.Message.getField(msg, 2),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.TechwolfKVEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfIqResponse}
 */
proto.TechwolfIqResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfIqResponse;
  return proto.TechwolfIqResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfIqResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfIqResponse}
 */
proto.TechwolfIqResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setQuery(value);
      break;
    case 3:
      var value = new proto.TechwolfKVEntry;
      reader.readMessage(value,proto.TechwolfKVEntry.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfIqResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfIqResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfIqResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfIqResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.TechwolfKVEntry.serializeBinaryToWriter
    );
  }
};


/**
 * required int64 qid = 1;
 * @return {number}
 */
proto.TechwolfIqResponse.prototype.getQid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfIqResponse.prototype.setQid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfIqResponse.prototype.clearQid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfIqResponse.prototype.hasQid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string query = 2;
 * @return {string}
 */
proto.TechwolfIqResponse.prototype.getQuery = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfIqResponse.prototype.setQuery = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfIqResponse.prototype.clearQuery = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfIqResponse.prototype.hasQuery = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TechwolfKVEntry results = 3;
 * @return {!Array.<!proto.TechwolfKVEntry>}
 */
proto.TechwolfIqResponse.prototype.getResultsList = function() {
  return /** @type{!Array.<!proto.TechwolfKVEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TechwolfKVEntry, 3));
};


/** @param {!Array.<!proto.TechwolfKVEntry>} value */
proto.TechwolfIqResponse.prototype.setResultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.TechwolfKVEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TechwolfKVEntry}
 */
proto.TechwolfIqResponse.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.TechwolfKVEntry, opt_index);
};


proto.TechwolfIqResponse.prototype.clearResultsList = function() {
  this.setResultsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfMessageSync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfMessageSync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfMessageSync.displayName = 'proto.TechwolfMessageSync';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfMessageSync.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfMessageSync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfMessageSync} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfMessageSync.toObject = function(includeInstance, msg) {
  var f, obj = {
    clientmid: jspb.Message.getField(msg, 1),
    servermid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfMessageSync}
 */
proto.TechwolfMessageSync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfMessageSync;
  return proto.TechwolfMessageSync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfMessageSync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfMessageSync}
 */
proto.TechwolfMessageSync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClientmid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setServermid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfMessageSync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfMessageSync.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfMessageSync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfMessageSync.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * required int64 clientMid = 1;
 * @return {number}
 */
proto.TechwolfMessageSync.prototype.getClientmid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfMessageSync.prototype.setClientmid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfMessageSync.prototype.clearClientmid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageSync.prototype.hasClientmid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 serverMid = 2;
 * @return {number}
 */
proto.TechwolfMessageSync.prototype.getServermid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TechwolfMessageSync.prototype.setServermid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfMessageSync.prototype.clearServermid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageSync.prototype.hasServermid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfMessageRead = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfMessageRead, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfMessageRead.displayName = 'proto.TechwolfMessageRead';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfMessageRead.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfMessageRead.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfMessageRead} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfMessageRead.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getField(msg, 1),
    messageid: jspb.Message.getField(msg, 2),
    readtime: jspb.Message.getField(msg, 3),
    sync: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfMessageRead}
 */
proto.TechwolfMessageRead.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfMessageRead;
  return proto.TechwolfMessageRead.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfMessageRead} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfMessageRead}
 */
proto.TechwolfMessageRead.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMessageid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setReadtime(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfMessageRead.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfMessageRead.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfMessageRead} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfMessageRead.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * required int64 userId = 1;
 * @return {number}
 */
proto.TechwolfMessageRead.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfMessageRead.prototype.setUserid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfMessageRead.prototype.clearUserid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageRead.prototype.hasUserid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int64 messageId = 2;
 * @return {number}
 */
proto.TechwolfMessageRead.prototype.getMessageid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TechwolfMessageRead.prototype.setMessageid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfMessageRead.prototype.clearMessageid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageRead.prototype.hasMessageid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int64 readTime = 3;
 * @return {number}
 */
proto.TechwolfMessageRead.prototype.getReadtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.TechwolfMessageRead.prototype.setReadtime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfMessageRead.prototype.clearReadtime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageRead.prototype.hasReadtime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool sync = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.TechwolfMessageRead.prototype.getSync = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.TechwolfMessageRead.prototype.setSync = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfMessageRead.prototype.clearSync = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfMessageRead.prototype.hasSync = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfChatProtocol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TechwolfChatProtocol.repeatedFields_, null);
};
goog.inherits(proto.TechwolfChatProtocol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfChatProtocol.displayName = 'proto.TechwolfChatProtocol';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TechwolfChatProtocol.repeatedFields_ = [3,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfChatProtocol.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfChatProtocol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfChatProtocol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfChatProtocol.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    version: jspb.Message.getField(msg, 2),
    messagesList: jspb.Message.toObjectList(msg.getMessagesList(),
    proto.TechwolfMessage.toObject, includeInstance),
    presence: (f = msg.getPresence()) && proto.TechwolfPresence.toObject(includeInstance, f),
    iq: (f = msg.getIq()) && proto.TechwolfIq.toObject(includeInstance, f),
    iqresponse: (f = msg.getIqresponse()) && proto.TechwolfIqResponse.toObject(includeInstance, f),
    messagesyncList: jspb.Message.toObjectList(msg.getMessagesyncList(),
    proto.TechwolfMessageSync.toObject, includeInstance),
    messagereadList: jspb.Message.toObjectList(msg.getMessagereadList(),
    proto.TechwolfMessageRead.toObject, includeInstance),
    datasync: (f = msg.getDatasync()) && proto.TechwolfDataSync.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfChatProtocol}
 */
proto.TechwolfChatProtocol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfChatProtocol;
  return proto.TechwolfChatProtocol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfChatProtocol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfChatProtocol}
 */
proto.TechwolfChatProtocol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 3:
      var value = new proto.TechwolfMessage;
      reader.readMessage(value,proto.TechwolfMessage.deserializeBinaryFromReader);
      msg.addMessages(value);
      break;
    case 4:
      var value = new proto.TechwolfPresence;
      reader.readMessage(value,proto.TechwolfPresence.deserializeBinaryFromReader);
      msg.setPresence(value);
      break;
    case 5:
      var value = new proto.TechwolfIq;
      reader.readMessage(value,proto.TechwolfIq.deserializeBinaryFromReader);
      msg.setIq(value);
      break;
    case 6:
      var value = new proto.TechwolfIqResponse;
      reader.readMessage(value,proto.TechwolfIqResponse.deserializeBinaryFromReader);
      msg.setIqresponse(value);
      break;
    case 7:
      var value = new proto.TechwolfMessageSync;
      reader.readMessage(value,proto.TechwolfMessageSync.deserializeBinaryFromReader);
      msg.addMessagesync(value);
      break;
    case 8:
      var value = new proto.TechwolfMessageRead;
      reader.readMessage(value,proto.TechwolfMessageRead.deserializeBinaryFromReader);
      msg.addMessageread(value);
      break;
    case 9:
      var value = new proto.TechwolfDataSync;
      reader.readMessage(value,proto.TechwolfDataSync.deserializeBinaryFromReader);
      msg.setDatasync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfChatProtocol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfChatProtocol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfChatProtocol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfChatProtocol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMessagesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.TechwolfMessage.serializeBinaryToWriter
    );
  }
  f = message.getPresence();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.TechwolfPresence.serializeBinaryToWriter
    );
  }
  f = message.getIq();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.TechwolfIq.serializeBinaryToWriter
    );
  }
  f = message.getIqresponse();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.TechwolfIqResponse.serializeBinaryToWriter
    );
  }
  f = message.getMessagesyncList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.TechwolfMessageSync.serializeBinaryToWriter
    );
  }
  f = message.getMessagereadList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.TechwolfMessageRead.serializeBinaryToWriter
    );
  }
  f = message.getDatasync();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.TechwolfDataSync.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.TechwolfChatProtocol.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfChatProtocol.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfChatProtocol.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfChatProtocol.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.TechwolfChatProtocol.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfChatProtocol.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfChatProtocol.prototype.clearVersion = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfChatProtocol.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated TechwolfMessage messages = 3;
 * @return {!Array.<!proto.TechwolfMessage>}
 */
proto.TechwolfChatProtocol.prototype.getMessagesList = function() {
  return /** @type{!Array.<!proto.TechwolfMessage>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TechwolfMessage, 3));
};


/** @param {!Array.<!proto.TechwolfMessage>} value */
proto.TechwolfChatProtocol.prototype.setMessagesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.TechwolfMessage=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TechwolfMessage}
 */
proto.TechwolfChatProtocol.prototype.addMessages = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.TechwolfMessage, opt_index);
};


proto.TechwolfChatProtocol.prototype.clearMessagesList = function() {
  this.setMessagesList([]);
};


/**
 * optional TechwolfPresence presence = 4;
 * @return {?proto.TechwolfPresence}
 */
proto.TechwolfChatProtocol.prototype.getPresence = function() {
  return /** @type{?proto.TechwolfPresence} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfPresence, 4));
};


/** @param {?proto.TechwolfPresence|undefined} value */
proto.TechwolfChatProtocol.prototype.setPresence = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.TechwolfChatProtocol.prototype.clearPresence = function() {
  this.setPresence(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfChatProtocol.prototype.hasPresence = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TechwolfIq iq = 5;
 * @return {?proto.TechwolfIq}
 */
proto.TechwolfChatProtocol.prototype.getIq = function() {
  return /** @type{?proto.TechwolfIq} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfIq, 5));
};


/** @param {?proto.TechwolfIq|undefined} value */
proto.TechwolfChatProtocol.prototype.setIq = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.TechwolfChatProtocol.prototype.clearIq = function() {
  this.setIq(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfChatProtocol.prototype.hasIq = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional TechwolfIqResponse iqResponse = 6;
 * @return {?proto.TechwolfIqResponse}
 */
proto.TechwolfChatProtocol.prototype.getIqresponse = function() {
  return /** @type{?proto.TechwolfIqResponse} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfIqResponse, 6));
};


/** @param {?proto.TechwolfIqResponse|undefined} value */
proto.TechwolfChatProtocol.prototype.setIqresponse = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.TechwolfChatProtocol.prototype.clearIqresponse = function() {
  this.setIqresponse(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfChatProtocol.prototype.hasIqresponse = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * repeated TechwolfMessageSync messageSync = 7;
 * @return {!Array.<!proto.TechwolfMessageSync>}
 */
proto.TechwolfChatProtocol.prototype.getMessagesyncList = function() {
  return /** @type{!Array.<!proto.TechwolfMessageSync>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TechwolfMessageSync, 7));
};


/** @param {!Array.<!proto.TechwolfMessageSync>} value */
proto.TechwolfChatProtocol.prototype.setMessagesyncList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.TechwolfMessageSync=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TechwolfMessageSync}
 */
proto.TechwolfChatProtocol.prototype.addMessagesync = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.TechwolfMessageSync, opt_index);
};


proto.TechwolfChatProtocol.prototype.clearMessagesyncList = function() {
  this.setMessagesyncList([]);
};


/**
 * repeated TechwolfMessageRead messageRead = 8;
 * @return {!Array.<!proto.TechwolfMessageRead>}
 */
proto.TechwolfChatProtocol.prototype.getMessagereadList = function() {
  return /** @type{!Array.<!proto.TechwolfMessageRead>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TechwolfMessageRead, 8));
};


/** @param {!Array.<!proto.TechwolfMessageRead>} value */
proto.TechwolfChatProtocol.prototype.setMessagereadList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.TechwolfMessageRead=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TechwolfMessageRead}
 */
proto.TechwolfChatProtocol.prototype.addMessageread = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.TechwolfMessageRead, opt_index);
};


proto.TechwolfChatProtocol.prototype.clearMessagereadList = function() {
  this.setMessagereadList([]);
};


/**
 * optional TechwolfDataSync dataSync = 9;
 * @return {?proto.TechwolfDataSync}
 */
proto.TechwolfChatProtocol.prototype.getDatasync = function() {
  return /** @type{?proto.TechwolfDataSync} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfDataSync, 9));
};


/** @param {?proto.TechwolfDataSync|undefined} value */
proto.TechwolfChatProtocol.prototype.setDatasync = function(value) {
  jspb.Message.setWrapperField(this, 9, value);
};


proto.TechwolfChatProtocol.prototype.clearDatasync = function() {
  this.setDatasync(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfChatProtocol.prototype.hasDatasync = function() {
  return jspb.Message.getField(this, 9) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfRedEnvelope = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfRedEnvelope, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfRedEnvelope.displayName = 'proto.TechwolfRedEnvelope';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfRedEnvelope.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfRedEnvelope.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfRedEnvelope} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfRedEnvelope.toObject = function(includeInstance, msg) {
  var f, obj = {
    redid: jspb.Message.getField(msg, 1),
    redtext: jspb.Message.getField(msg, 2),
    redtitle: jspb.Message.getField(msg, 3),
    clickurl: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfRedEnvelope}
 */
proto.TechwolfRedEnvelope.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfRedEnvelope;
  return proto.TechwolfRedEnvelope.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfRedEnvelope} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfRedEnvelope}
 */
proto.TechwolfRedEnvelope.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRedid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedtext(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setRedtitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setClickurl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfRedEnvelope.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfRedEnvelope.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfRedEnvelope} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfRedEnvelope.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * required int64 redId = 1;
 * @return {number}
 */
proto.TechwolfRedEnvelope.prototype.getRedid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfRedEnvelope.prototype.setRedid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfRedEnvelope.prototype.clearRedid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfRedEnvelope.prototype.hasRedid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string redText = 2;
 * @return {string}
 */
proto.TechwolfRedEnvelope.prototype.getRedtext = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfRedEnvelope.prototype.setRedtext = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfRedEnvelope.prototype.clearRedtext = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfRedEnvelope.prototype.hasRedtext = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string redTitle = 3;
 * @return {string}
 */
proto.TechwolfRedEnvelope.prototype.getRedtitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TechwolfRedEnvelope.prototype.setRedtitle = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfRedEnvelope.prototype.clearRedtitle = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfRedEnvelope.prototype.hasRedtitle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string clickUrl = 4;
 * @return {string}
 */
proto.TechwolfRedEnvelope.prototype.getClickurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.TechwolfRedEnvelope.prototype.setClickurl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.TechwolfRedEnvelope.prototype.clearClickurl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfRedEnvelope.prototype.hasClickurl = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfOrderDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TechwolfOrderDetail.repeatedFields_, null);
};
goog.inherits(proto.TechwolfOrderDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfOrderDetail.displayName = 'proto.TechwolfOrderDetail';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TechwolfOrderDetail.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfOrderDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfOrderDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfOrderDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfOrderDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    title: jspb.Message.getField(msg, 1),
    subtitle: jspb.Message.getField(msg, 2),
    url: jspb.Message.getField(msg, 3),
    orderdetailentrylistList: jspb.Message.toObjectList(msg.getOrderdetailentrylistList(),
    proto.TechwolfOrderDetailEntry.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfOrderDetail}
 */
proto.TechwolfOrderDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfOrderDetail;
  return proto.TechwolfOrderDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfOrderDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfOrderDetail}
 */
proto.TechwolfOrderDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSubtitle(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUrl(value);
      break;
    case 4:
      var value = new proto.TechwolfOrderDetailEntry;
      reader.readMessage(value,proto.TechwolfOrderDetailEntry.deserializeBinaryFromReader);
      msg.addOrderdetailentrylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfOrderDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfOrderDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfOrderDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfOrderDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOrderdetailentrylistList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.TechwolfOrderDetailEntry.serializeBinaryToWriter
    );
  }
};


/**
 * required string title = 1;
 * @return {string}
 */
proto.TechwolfOrderDetail.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfOrderDetail.prototype.setTitle = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfOrderDetail.prototype.clearTitle = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfOrderDetail.prototype.hasTitle = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string subTitle = 2;
 * @return {string}
 */
proto.TechwolfOrderDetail.prototype.getSubtitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.TechwolfOrderDetail.prototype.setSubtitle = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfOrderDetail.prototype.clearSubtitle = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfOrderDetail.prototype.hasSubtitle = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string url = 3;
 * @return {string}
 */
proto.TechwolfOrderDetail.prototype.getUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.TechwolfOrderDetail.prototype.setUrl = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.TechwolfOrderDetail.prototype.clearUrl = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfOrderDetail.prototype.hasUrl = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated TechwolfOrderDetailEntry orderDetailEntryList = 4;
 * @return {!Array.<!proto.TechwolfOrderDetailEntry>}
 */
proto.TechwolfOrderDetail.prototype.getOrderdetailentrylistList = function() {
  return /** @type{!Array.<!proto.TechwolfOrderDetailEntry>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TechwolfOrderDetailEntry, 4));
};


/** @param {!Array.<!proto.TechwolfOrderDetailEntry>} value */
proto.TechwolfOrderDetail.prototype.setOrderdetailentrylistList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.TechwolfOrderDetailEntry=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TechwolfOrderDetailEntry}
 */
proto.TechwolfOrderDetail.prototype.addOrderdetailentrylist = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.TechwolfOrderDetailEntry, opt_index);
};


proto.TechwolfOrderDetail.prototype.clearOrderdetailentrylistList = function() {
  this.setOrderdetailentrylistList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfOrderDetailItem = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfOrderDetailItem, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfOrderDetailItem.displayName = 'proto.TechwolfOrderDetailItem';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfOrderDetailItem.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfOrderDetailItem.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfOrderDetailItem} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfOrderDetailItem.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    templateid: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfOrderDetailItem}
 */
proto.TechwolfOrderDetailItem.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfOrderDetailItem;
  return proto.TechwolfOrderDetailItem.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfOrderDetailItem} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfOrderDetailItem}
 */
proto.TechwolfOrderDetailItem.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemplateid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfOrderDetailItem.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfOrderDetailItem.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfOrderDetailItem} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfOrderDetailItem.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.TechwolfOrderDetailItem.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TechwolfOrderDetailItem.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfOrderDetailItem.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfOrderDetailItem.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 templateId = 2;
 * @return {number}
 */
proto.TechwolfOrderDetailItem.prototype.getTemplateid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TechwolfOrderDetailItem.prototype.setTemplateid = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfOrderDetailItem.prototype.clearTemplateid = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfOrderDetailItem.prototype.hasTemplateid = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfOrderDetailEntry = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfOrderDetailEntry, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfOrderDetailEntry.displayName = 'proto.TechwolfOrderDetailEntry';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfOrderDetailEntry.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfOrderDetailEntry.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfOrderDetailEntry} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfOrderDetailEntry.toObject = function(includeInstance, msg) {
  var f, obj = {
    key: (f = msg.getKey()) && proto.TechwolfOrderDetailItem.toObject(includeInstance, f),
    value: (f = msg.getValue()) && proto.TechwolfOrderDetailItem.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfOrderDetailEntry}
 */
proto.TechwolfOrderDetailEntry.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfOrderDetailEntry;
  return proto.TechwolfOrderDetailEntry.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfOrderDetailEntry} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfOrderDetailEntry}
 */
proto.TechwolfOrderDetailEntry.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TechwolfOrderDetailItem;
      reader.readMessage(value,proto.TechwolfOrderDetailItem.deserializeBinaryFromReader);
      msg.setKey(value);
      break;
    case 2:
      var value = new proto.TechwolfOrderDetailItem;
      reader.readMessage(value,proto.TechwolfOrderDetailItem.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfOrderDetailEntry.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfOrderDetailEntry.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfOrderDetailEntry} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfOrderDetailEntry.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKey();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.TechwolfOrderDetailItem.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TechwolfOrderDetailItem.serializeBinaryToWriter
    );
  }
};


/**
 * required TechwolfOrderDetailItem key = 1;
 * @return {!proto.TechwolfOrderDetailItem}
 */
proto.TechwolfOrderDetailEntry.prototype.getKey = function() {
  return /** @type{!proto.TechwolfOrderDetailItem} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfOrderDetailItem, 1, 1));
};


/** @param {!proto.TechwolfOrderDetailItem} value */
proto.TechwolfOrderDetailEntry.prototype.setKey = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.TechwolfOrderDetailEntry.prototype.clearKey = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfOrderDetailEntry.prototype.hasKey = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required TechwolfOrderDetailItem value = 2;
 * @return {!proto.TechwolfOrderDetailItem}
 */
proto.TechwolfOrderDetailEntry.prototype.getValue = function() {
  return /** @type{!proto.TechwolfOrderDetailItem} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfOrderDetailItem, 2, 1));
};


/** @param {!proto.TechwolfOrderDetailItem} value */
proto.TechwolfOrderDetailEntry.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TechwolfOrderDetailEntry.prototype.clearValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfOrderDetailEntry.prototype.hasValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfUserSync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfUserSync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfUserSync.displayName = 'proto.TechwolfUserSync';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfUserSync.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfUserSync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfUserSync} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfUserSync.toObject = function(includeInstance, msg) {
  var f, obj = {
    uid: jspb.Message.getField(msg, 1),
    identity: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfUserSync}
 */
proto.TechwolfUserSync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfUserSync;
  return proto.TechwolfUserSync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfUserSync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfUserSync}
 */
proto.TechwolfUserSync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setUid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIdentity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfUserSync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfUserSync.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfUserSync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfUserSync.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * required int64 uid = 1;
 * @return {number}
 */
proto.TechwolfUserSync.prototype.getUid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfUserSync.prototype.setUid = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfUserSync.prototype.clearUid = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfUserSync.prototype.hasUid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 identity = 2;
 * @return {number}
 */
proto.TechwolfUserSync.prototype.getIdentity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TechwolfUserSync.prototype.setIdentity = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.TechwolfUserSync.prototype.clearIdentity = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfUserSync.prototype.hasIdentity = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TechwolfDataSync = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TechwolfDataSync, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TechwolfDataSync.displayName = 'proto.TechwolfDataSync';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TechwolfDataSync.prototype.toObject = function(opt_includeInstance) {
  return proto.TechwolfDataSync.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TechwolfDataSync} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfDataSync.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    usersync: (f = msg.getUsersync()) && proto.TechwolfUserSync.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TechwolfDataSync}
 */
proto.TechwolfDataSync.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TechwolfDataSync;
  return proto.TechwolfDataSync.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TechwolfDataSync} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TechwolfDataSync}
 */
proto.TechwolfDataSync.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.TechwolfUserSync;
      reader.readMessage(value,proto.TechwolfUserSync.deserializeBinaryFromReader);
      msg.setUsersync(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TechwolfDataSync.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TechwolfDataSync.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TechwolfDataSync} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TechwolfDataSync.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getUsersync();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.TechwolfUserSync.serializeBinaryToWriter
    );
  }
};


/**
 * required int32 type = 1;
 * @return {number}
 */
proto.TechwolfDataSync.prototype.getType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.TechwolfDataSync.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.TechwolfDataSync.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDataSync.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional TechwolfUserSync userSync = 2;
 * @return {?proto.TechwolfUserSync}
 */
proto.TechwolfDataSync.prototype.getUsersync = function() {
  return /** @type{?proto.TechwolfUserSync} */ (
    jspb.Message.getWrapperField(this, proto.TechwolfUserSync, 2));
};


/** @param {?proto.TechwolfUserSync|undefined} value */
proto.TechwolfDataSync.prototype.setUsersync = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.TechwolfDataSync.prototype.clearUsersync = function() {
  this.setUsersync(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TechwolfDataSync.prototype.hasUsersync = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto);
